// Instructor Dashboard
// Chakri - April 2025

import React, { useState, useEffect } from 'react';
import { Link } from 'wouter';
import { useClerkAuth } from '../hooks/useClerkAuth';
import { useToast } from '../hooks/use-toast';

// This is the dashboard for instructors
const InstructorDashboard = () => {
  const { userData, getAuthToken } = useClerkAuth();
  const { toast } = useToast();
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [stats, setStats] = useState({
    totalCourses: 0,
    publishedCourses: 0,
    totalStudents: 0,
    totalRevenue: 0
  });

  // Load instructor's courses when component mounts
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const token = await getAuthToken();
        
        if (!token) {
          setError('Authentication token not found');
          setLoading(false);
          return;
        }
        
        const response = await fetch('/api/instructor/courses', {
          headers: {
            Authorization: `Bearer ${token}`
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch courses');
        }
        
        const data = await response.json();
        setCourses(data);
        
        // Calculate stats
        const published = data.filter(course => course.isPublished).length;
        const students = data.reduce((total, course) => total + (course.enrollmentCount || 0), 0);
        const revenue = data.reduce((total, course) => {
          return total + (course.revenue || 0);
        }, 0);
        
        setStats({
          totalCourses: data.length,
          publishedCourses: published,
          totalStudents: students,
          totalRevenue: revenue
        });
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching instructor courses:', err);
        setError(err.message);
        setLoading(false);
        
        toast({
          title: 'Error',
          description: 'Failed to load your courses. Please try again.',
          variant: 'error'
        });
      }
    };
    
    fetchCourses();
  }, [getAuthToken, toast]);

  // Delete a course
  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm('Are you sure you want to delete this course? This action cannot be undone.')) {
      return;
    }
    
    try {
      const token = await getAuthToken();
      
      const response = await fetch(`/api/courses/${courseId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete course');
      }
      
      // Update courses list
      setCourses(courses.filter(course => course._id !== courseId));
      
      // Update stats
      const deletedCourse = courses.find(course => course._id === courseId);
      const wasPublished = deletedCourse.isPublished;
      
      setStats(prev => ({
        totalCourses: prev.totalCourses - 1,
        publishedCourses: wasPublished ? prev.publishedCourses - 1 : prev.publishedCourses,
        totalStudents: prev.totalStudents - (deletedCourse.enrollmentCount || 0),
        totalRevenue: prev.totalRevenue - (deletedCourse.revenue || 0)
      }));
      
      toast({
        title: 'Course Deleted',
        description: 'Your course has been deleted successfully',
        variant: 'success'
      });
    } catch (err) {
      console.error('Error deleting course:', err);
      
      toast({
        title: 'Error',
        description: 'Failed to delete course. Please try again.',
        variant: 'error'
      });
    }
  };

  // Show loading state
  if (loading) {
    return (
      <div className="container py-5 text-center">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <p className="mt-2">Loading your courses...</p>
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div className="container py-5">
        <div className="alert alert-danger">
          <h4 className="alert-heading">Something went wrong ðŸ˜•</h4>
          <p>{error}</p>
          <hr />
          <p className="mb-0">Please try refreshing the page or contact support if the issue persists.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container py-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1>My Teaching Portal</h1>
        <div>
          <Link to="/profile" className="btn btn-outline-secondary me-2">
            <i className="bi bi-person-circle me-2"></i>
            My Profile
          </Link>
          <Link to="/instructor/courses/create" className="btn btn-primary">
            <i className="bi bi-plus-circle me-2"></i>
            Create Course
          </Link>
        </div>
      </div>
      
      {/* Stats Cards */}
      <div className="row mb-4">
        <div className="col-md-3 mb-3 mb-md-0">
          <div className="card border-primary">
            <div className="card-body">
              <h5 className="card-title">My Courses</h5>
              <h2 className="mb-0">{stats.totalCourses}</h2>
            </div>
          </div>
        </div>
        <div className="col-md-3 mb-3 mb-md-0">
          <div className="card border-success">
            <div className="card-body">
              <h5 className="card-title">Published</h5>
              <h2 className="mb-0">{stats.publishedCourses}</h2>
            </div>
          </div>
        </div>
        <div className="col-md-3 mb-3 mb-md-0">
          <div className="card border-info">
            <div className="card-body">
              <h5 className="card-title">Students</h5>
              <h2 className="mb-0">{stats.totalStudents}</h2>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card border-warning">
            <div className="card-body">
              <h5 className="card-title">Revenue</h5>
              <h2 className="mb-0">Â£{stats.totalRevenue.toFixed(2)}</h2>
            </div>
          </div>
        </div>
      </div>
      
      {/* Courses Table */}
      <div className="card">
        <div className="card-header">
          <h3 className="mb-0">Your Courses</h3>
        </div>
        <div className="card-body">
          {courses.length === 0 ? (
            <div className="text-center py-5">
              <i className="bi bi-journal-x display-4 text-muted"></i>
              <h4 className="mt-3">No courses yet</h4>
              <p className="text-muted">You haven't created any courses yet.</p>
              <Link to="/instructor/courses/create" className="btn btn-primary mt-2">
                Create Your First Course
              </Link>
            </div>
          ) : (
            <div className="table-responsive">
              <table className="table table-hover">
                <thead>
                  <tr>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Students</th>
                    <th>Rating</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {courses.map(course => (
                    <tr key={course._id}>
                      <td>
                        <Link to={`/courses/${course._id}`} className="text-decoration-none">
                          {course.title}
                        </Link>
                      </td>
                      <td>
                        <span className="badge bg-secondary">{course.category.replace('-', ' ')}</span>
                      </td>
                      <td>Â£{course.price.toFixed(2)}</td>
                      <td>
                        {course.isPublished ? (
                          <span className="badge bg-success">Published</span>
                        ) : (
                          <span className="badge bg-warning text-dark">Draft</span>
                        )}
                      </td>
                      <td>{course.enrollmentCount || 0}</td>
                      <td>
                        <div className="d-flex align-items-center">
                          <span className="me-2">{course.averageRating.toFixed(1)}</span>
                          <div className="text-warning">
                            {[...Array(5)].map((_, i) => (
                              <i 
                                key={i} 
                                className={`bi ${i < Math.round(course.averageRating) ? 'bi-star-fill' : 'bi-star'}`}
                              ></i>
                            ))}
                          </div>
                        </div>
                      </td>
                      <td>
                        <div className="btn-group">
                          <Link 
                            to={`/instructor/courses/${course._id}/edit`} 
                            className="btn btn-sm btn-outline-primary"
                          >
                            Edit
                          </Link>
                          <button 
                            className="btn btn-sm btn-outline-danger"
                            onClick={() => handleDeleteCourse(course._id)}
                          >
                            Delete
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
      
      {/* Tips section */}
      <div className="card mt-4 border-secondary">
        <div className="card-header">
          <h4 className="mb-0">Tips For Success</h4>
        </div>
        <div className="card-body">
          <div className="row">
            <div className="col-md-4 mb-3 mb-md-0">
              <h5><i className="bi bi-lightbulb text-warning me-2"></i>Making Great Content</h5>
              <ul className="small">
                <li>Focus on practical skills students can use</li>
                <li>Break complex topics into smaller chunks</li>
                <li>Mix text, images, and videos for variety</li>
              </ul>
            </div>
            <div className="col-md-4 mb-3 mb-md-0">
              <h5><i className="bi bi-graph-up text-success me-2"></i>Getting More Students</h5>
              <ul className="small">
                <li>Make your first lesson free as a preview</li>
                <li>Answer student questions quickly</li>
                <li>Update your content regularly</li>
              </ul>
            </div>
            <div className="col-md-4">
              <h5><i className="bi bi-cash-coin text-primary me-2"></i>Increasing Earnings</h5>
              <ul className="small">
                <li>Price based on content value and length</li>
                <li>Bundle related topics together</li>
                <li>Run limited-time promotions</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InstructorDashboard;